Minh Pham

====================================================================================================
Diffie-Hellman

The shared key is 36

Method: use this python script:

answer = []
for x in range(59):
	for y in range(59):
		if 11**x % 59 == 57 and 11**y % 59 == 44:
			# find the condition that is required for the shared value to be
			a.append(44**x % 58)
print(answer)

This returns a single value 36

This method wouldn't work for large numbers because although the code would be able to brute force check iterate through every pair of integers smaller than that large number, it takes a long time for the machine to raise a number to that large number. Essentially, this script runs in exponential time to the input x and y, which is not practical for large n.

====================================================================================================
RSA

The message is: 

Hey Bob. It's even worse than we thought! Your pal, Alice. https://www.schneier.com/blog/archives/2022/04/airtags-are-used-for-stalking-far-more-than-previously-reported.html

Method: use this python script:

text = [1516, 3860, 2891, 570, 3483, 4022, 3437, 299,
 570, 843, 3433, 5450, 653, 570, 3860, 482,
 3860, 4851, 570, 2187, 4022, 3075, 653, 3860,
 570, 3433, 1511, 2442, 4851, 570, 2187, 3860,
 570, 3433, 1511, 4022, 3411, 5139, 1511, 3433,
 4180, 570, 4169, 4022, 3411, 3075, 570, 3000,
 2442, 2458, 4759, 570, 2863, 2458, 3455, 1106,
 3860, 299, 570, 1511, 3433, 3433, 3000, 653,
 3269, 4951, 4951, 2187, 2187, 2187, 299, 653,
 1106, 1511, 4851, 3860, 3455, 3860, 3075, 299,
 1106, 4022, 3194, 4951, 3437, 2458, 4022, 5139,
 4951, 2442, 3075, 1106, 1511, 3455, 482, 3860,
 653, 4951, 2875, 3668, 2875, 2875, 4951, 3668,
 4063, 4951, 2442, 3455, 3075, 3433, 2442, 5139,
 653, 5077, 2442, 3075, 3860, 5077, 3411, 653,
 3860, 1165, 5077, 2713, 4022, 3075, 5077, 653,
 3433, 2442, 2458, 3409, 3455, 4851, 5139, 5077,
 2713, 2442, 3075, 5077, 3194, 4022, 3075, 3860,
 5077, 3433, 1511, 2442, 4851, 5077, 3000, 3075,
 3860, 482, 3455, 4022, 3411, 653, 2458, 2891,
 5077, 3075, 3860, 3000, 4022, 3075, 3433, 3860,
 1165, 299, 1511, 3433, 3194, 2458]

e = 13
n = 5561
answer = []
# ascii goes from 32 to 126, inclusive
for i in text:
 	for x in range(32, 127):
 		# check every character from 32 to 126 to see which is right
 		if x**e % n == i:
 			answer.append(chr(x))
print(''.join(answer))

Based on the encryption scheme, e can potentially be really large, because it can be as large as delta - 1.
In that case, x^e will take a long time to run, in exponential time to e.

Even if e and n are large, the method is still insecure because it is applying the same equation on every characters. Therefore, a character in different spots will be encrypted to be the same number. This means that this is just substitution with extra steps, and we already know that substution is not secure.
